'use strict';

const translations = {
  uk: {
    meta_description:
      '–ß–µ–∫–ª—ñ—Å—Ç–∏ —Ç–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∏ —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥—É –¥–ª—è JavaScript, PHP —Ç–∞ Python –≤—ñ–¥ –ê–Ω–¥—Ä—ñ—è –û–≤—á–∞—Ä–æ–≤–∞.',
    meta_keywords:
      '—á–∏—Å—Ç–∏–π –∫–æ–¥, JavaScript, PHP, Python, –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, —á–µ–∫–ª—ñ—Å—Ç',
    title: '–ß–∏—Å—Ç–∏–π –ö–æ–¥ ‚Äî –ü—Ä–∏–Ω—Ü–∏–ø–∏ + –ß–µ–∫–ª—ñ—Å—Ç',
    header_h1: 'üßº –ß–∏—Å—Ç–∏–π –ö–æ–¥ ‚Äî –ü—Ä–∏–Ω—Ü–∏–ø–∏ + –ß–µ–∫–ª—ñ—Å—Ç',
    header_p: '–ö–æ–¥—É–π –∑—ñ —Å–º–∞–∫–æ–º. –ö–æ–¥—É–π —Å–≤—ñ–¥–æ–º–æ. –ü–µ—Ä–µ–¥ –ø—É—à–µ–º ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä —Å–µ–±–µ.',
    theme_toggle: '–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É',
    reset_checklist: '–°–∫–∏–Ω—É—Ç–∏ —á–µ–∫–ª—ñ—Å—Ç',
    progress_label: '–í–∏–∫–æ–Ω–∞–Ω–æ:',
    progress_of: '–∑',
    result_text:
      'üü¢ –£—Å—ñ –ø—É–Ω–∫—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ? –¢–∏ ‚Äî –±–æ–≥ —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥—É. –ü—É—à –∑—ñ —Å–ø–æ–∫—ñ–π–Ω–æ—é –¥—É—à–µ—é üòéüöÄ',
    footer_text: '–°—Ç–≤–æ—Ä–µ–Ω–æ –∑ ‚ù§Ô∏è <strong>–ê–Ω–¥—Ä—ñ–π –û–≤—á–∞—Ä–æ–≤</strong>',
    footer_quote: '¬´–ö–æ–¥—É–π –∑—ñ —Å–º–∞–∫–æ–º. –ö–æ–¥—É–π —Å–≤—ñ–¥–æ–º–æ.¬ª',

    // JavaScript –ü—Ä–∏–Ω—Ü–∏–ø–∏
    js_principles_h2: 'üîü –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ —á–∏—Å—Ç–æ–≥–æ JavaScript-–∫–æ–¥—É',
    js_principle_1:
      '<strong>–û–¥–∏–Ω —Ä—è–¥–æ–∫ ‚Äî –æ–¥–Ω–∞ –¥—ñ—è</strong><br /><code>const total = price * quantity;</code> ‚Äî —É–Ω–∏–∫–∞–π –∫—ñ–ª—å–∫–æ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É.',
    js_principle_2:
      '<strong>–ó–º—ñ–Ω–Ω—ñ –∑ —á—ñ—Ç–∫–∏–º–∏ —ñ–º–µ–Ω–∞–º–∏</strong><br /><code>const userProfile;</code> –∫—Ä–∞—â–µ, –Ω—ñ–∂ <code>const u;</code>',
    js_principle_3:
      '<strong>–§—É–Ω–∫—Ü—ñ—è —Ä–æ–±–∏—Ç—å –æ–¥–Ω—É —Ä—ñ—á</strong><br />–ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Ñ—É–Ω–∫—Ü—ñ—è <code>fetchUserData</code> –ª–∏—à–µ –æ—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ, –∞ –Ω–µ –æ–Ω–æ–≤–ª—é—î UI.',
    js_principle_4:
      '<strong>DRY ‚Äî Don‚Äôt Repeat Yourself</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>map</code> –∞–±–æ <code>reduce</code> –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä—ñ–≤.',
    js_principle_5:
      '<strong>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>const</code> –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º</strong><br />–ó–∞–º—ñ—Å—Ç—å <code>let</code> –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>const</code>, —è–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è.',
    js_principle_6:
      '<strong>–ú—ñ–Ω—ñ–º—ñ–∑—É–π –≤–∫–ª–∞–¥–µ–Ω—ñ—Å—Ç—å</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ä–∞–Ω–Ω—ñ–π <code>return</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <pre><code>if (!user) return null;</code></pre>',
    js_principle_7:
      '<strong>–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –ø–æ—è—Å–Ω—é—é—Ç—å ¬´—á–æ–º—É¬ª</strong><br />–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <pre><code>// –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó\nconst cachedData = getData();</code></pre>',
    js_principle_8:
      '<strong>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π ES6+ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ</strong><br />–°—Ç—Ä—ñ–ª–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è: <code>const { id, name } = user;</code>',
    js_principle_9:
      '<strong>–û–±—Ä–æ–±–ª—è–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ—Å—Ç—å —á—ñ—Ç–∫–æ</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>async/await</code> –∑–∞–º—ñ—Å—Ç—å <code>.then</code>.',
    js_principle_10:
      '<strong>–§–æ—Ä–º–∞—Ç—É–π –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</strong><br />ESLint + Prettier –¥–ª—è —î–¥–∏–Ω–æ–≥–æ —Å—Ç–∏–ª—é.',
    js_principle_11:
      '<strong>–£–Ω–∏–∫–∞–π –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–æ–¥—É–ª—ñ –∞–±–æ –∑–∞–º–∏–∫–∞–Ω–Ω—è.',
    js_principle_12:
      '<strong>–ü–µ—Ä–µ–≤—ñ—Ä—è–π —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>typeof</code> –∞–±–æ TypeScript –¥–ª—è –±–µ–∑–ø–µ–∫–∏.',
    // JavaScript –ß–µ–∫–ª—ñ—Å—Ç
    js_checklist_h2: '‚úÖ –ß–µ–∫–ª—ñ—Å—Ç —á–∏—Å—Ç–æ–≥–æ JavaScript-–∫–æ–¥—É',

    js_names_legend: 'üî° –Ü–º–µ–Ω–∞ —Ç–∞ –∑–º—ñ–Ω–Ω—ñ',
    js_checklist_names_1: '–Ü–º‚Äô—è –∑–º—ñ–Ω–Ω–æ—ó/—Ñ—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ–¥–∞—î —ó—ó —Å—É—Ç—å?',
    js_checklist_names_1_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>calculateTotalPrice</code> –∫—Ä–∞—â–µ, –Ω—ñ–∂ <code>calc</code>)',
    js_checklist_names_2: '–ú–∞–≥—ñ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–Ω–µ—Å–µ–Ω—ñ?',
    js_checklist_names_2_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>const MAX_USERS = 100;</code> –∑–∞–º—ñ—Å—Ç—å <code>100</code>)',
    js_checklist_names_3: '–ù–µ–º–∞—î —Å—Ö–æ–∂–∏—Ö —ñ–º–µ–Ω, —â–æ –ø–ª—É—Ç–∞—é—Ç—å?',
    js_checklist_names_3_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>user</code> —ñ <code>users</code> –º–æ–∂—É—Ç—å –∑–∞–ø–ª—É—Ç–∞—Ç–∏)',

    js_structure_legend: 'üß© –°—Ç—Ä—É–∫—Ç—É—Ä–∞',
    js_checklist_structure_1: '–û–¥–∏–Ω —Ä—è–¥–æ–∫ ‚Äî –æ–¥–Ω–∞ –¥—ñ—è?',
    js_checklist_structure_1_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>const sum = a + b;</code> –∑–∞–º—ñ—Å—Ç—å –∫—ñ–ª—å–∫–æ—Ö –¥—ñ–π)',
    js_checklist_structure_2: '–§—É–Ω–∫—Ü—ñ—ó –Ω–µ–≤–µ–ª–∏–∫—ñ, —Ä–æ–±–ª—è—Ç—å –æ–¥–Ω–µ?',
    js_checklist_structure_2_small:
      '(–§—É–Ω–∫—Ü—ñ—è –¥–æ 20 —Ä—è–¥–∫—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>getUserById</code>)',
    js_checklist_structure_3: '–ì–ª–∏–±–∏–Ω–∞ –≤–∫–ª–∞–¥–µ–Ω–æ—Å—Ç—ñ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞?',
    js_checklist_structure_3_small:
      '(–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ä–∞–Ω–Ω—ñ–π <code>return</code> –∑–∞–º—ñ—Å—Ç—å –≥–ª–∏–±–æ–∫–∏—Ö <code>if</code>)',

    js_repetition_legend: '‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–∏',
    js_checklist_repetition_1: '–£–Ω–∏–∫–Ω–µ–Ω–æ –∫–æ–ø—ñ–ø–∞—Å—Ç—É?',
    js_checklist_repetition_1_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>array.map</code> –∑–∞–º—ñ—Å—Ç—å —Ü–∏–∫–ª—ñ–≤)',
    js_checklist_repetition_2: '–°—Ö–æ–∂—ñ —Ä–µ—á—ñ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –æ–¥–Ω–∞–∫–æ–≤–æ?',
    js_checklist_repetition_2_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç —á–µ—Ä–µ–∑ <code>date-fns</code>)',

    js_formatting_legend: 'üßº –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è',
    js_checklist_formatting_1: '–ü—Ä–æ–≥–Ω–∞–≤ —á–µ—Ä–µ–∑ Prettier/ESLint?',
    js_checklist_formatting_1_small:
      "(<a href='https://eslint.org' target='_blank' rel='noopener'>ESLint</a> —ñ <a href='https://prettier.io' target='_blank' rel='noopener'>Prettier</a>)",
    js_checklist_formatting_2: '–í—Å—ñ –≤—ñ–¥—Å—Ç—É–ø–∏, –ª–∞–ø–∫–∏, –ø—Ä–æ–±—ñ–ª–∏ ‚Äî –æ–¥–Ω–∞–∫–æ–≤—ñ?',
    js_checklist_formatting_2_small: '(–ü–µ—Ä–µ–≤—ñ—Ä —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω–∏–∫)',
    js_checklist_formatting_3: '–í–∏–¥–∞–ª–µ–Ω–æ "–º–µ—Ä—Ç–≤–∏–π" –∫–æ–¥?',
    js_checklist_formatting_3_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —á–∏ <code>console.log</code>)',

    js_logic_legend: 'üß† –õ–æ–≥—ñ–∫–∞',
    js_checklist_logic_1: '–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –≤—Å—ñ –≥—ñ–ª–∫–∏?',
    js_checklist_logic_1_small:
      '(–ü–µ—Ä–µ–≤—ñ—Ä <code>if/else</code>, <code>switch</code>, —Ü–∏–∫–ª–∏)',
    js_checklist_logic_2: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ <code>===</code>, –∞ –Ω–µ <code>==</code>?',
    js_checklist_logic_2_small: '(–°—Ç—Ä–æ–≥–∞ —Ä—ñ–≤–Ω—ñ—Å—Ç—å —É–Ω–∏–∫–∞—î –ø–æ–º–∏–ª–æ–∫)',
    js_checklist_logic_3: '–û–±—Ä–æ–±–ª–µ–Ω—ñ –≤—Å—ñ edge cases?',
    js_checklist_logic_3_small:
      '(–ü–µ—Ä–µ–≤—ñ—Ä <code>null</code>, <code>undefined</code>, –ø–æ—Ä–æ–∂–Ω—ñ –º–∞—Å–∏–≤–∏)',
    js_checklist_logic_4: '–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–¥?',
    js_checklist_logic_4_small:
      '(–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ <code>async/await</code> –æ–±—Ä–æ–±–ª—è—î –ø–æ–º–∏–ª–∫–∏)',

    js_comments_legend: 'üìú –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ',
    js_checklist_comments_1: '–Ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —Ç–∞–º, –¥–µ —Ç—Ä–µ–±–∞?',
    js_checklist_comments_1_small:
      '(–ö–æ–º–µ–Ω—Ç—É–π —Å–∫–ª–∞–¥–Ω—É –ª–æ–≥—ñ–∫—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞–º–∏–∫–∞–Ω–Ω—è)',
    js_checklist_comments_2: '–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –ø–æ—è—Å–Ω—é—é—Ç—å ¬´—á–æ–º—É¬ª, –∞ –Ω–µ ¬´—â–æ¬ª?',
    js_checklist_comments_2_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, "// –î–æ–∑–≤–æ–ª—è—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω–∫–∏ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")',
    js_checklist_comments_3: '–ö–æ–¥ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤?',
    js_checklist_comments_3_small:
      '(–ß—ñ—Ç–∫—ñ —ñ–º–µ–Ω–∞ –∑–º–µ–Ω—à—É—é—Ç—å –ø–æ—Ç—Ä–µ–±—É –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö)',

    js_testing_legend: 'üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è',
    js_checklist_testing_1: '–ö–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –≤ –¥—ñ—ó?',
    js_checklist_testing_1_small: '(–ó–∞–ø—É—Å—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç)',
    js_checklist_testing_2: '–ù–µ –ª–∞–º–∞—î —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É?',
    js_checklist_testing_2_small: '(–ü–µ—Ä–µ–≤—ñ—Ä —Å—Ç–∞—Ä—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—ñ—Å–ª—è –∑–º—ñ–Ω)',
    js_checklist_testing_3: '–ü—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ —Ä—É–∫–∞–º–∏ –∞–±–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–º?',
    js_checklist_testing_3_small:
      '(–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>Jest</code> –∞–±–æ <code>Mocha</code>)',

    js_security_legend: 'üîí –ë–µ–∑–ø–µ–∫–∞',
    js_checklist_security_1: '–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –Ω–∞ –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ (XSS, —ñ–Ω‚Äô—î–∫—Ü—ñ—ó)?',
    js_checklist_security_1_small:
      '(–ï–∫—Ä–∞–Ω—É–π –¥–∞–Ω—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ <code>DOMPurify</code>)',
    js_checklist_security_2: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –±–µ–∑–ø–µ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–æ—Å—Ç—É–ø—É?',
    js_checklist_security_2_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, —É–Ω–∏–∫–Ω–µ–Ω–Ω—è <code>eval</code> —á–∏ <code>innerHTML</code>)',
    js_optimization_legend: '‚ö° –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è',
    js_checklist_optimization_1: '–ö–æ–¥ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—ñ?',
    js_checklist_optimization_1_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>forEach</code> –∑–∞–º—ñ—Å—Ç—å <code>for</code> –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ)',
    js_checklist_optimization_2:
      '–í–¥–∞–ª–æ—Å—è –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –Ω–∞–¥–º—ñ—Ä–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é —Ä–µ—Å—É—Ä—Å—ñ–≤?',
    js_checklist_optimization_2_small:
      '(–ü–µ—Ä–µ–≤—ñ—Ä –≤–∏—Ç–æ–∫–∏ –ø–∞–º‚Äô—è—Ç—ñ –≤ –∑–∞–º–∏–∫–∞–Ω–Ω—è—Ö —á–∏ —Å–ª—É—Ö–∞—á–∞—Ö –ø–æ–¥—ñ–π)',
    js_checklist_optimization_3: '–ß–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —Ä–µ–∂–∏–º "use strict"?',
    js_checklist_optimization_3_small:
      '(–î–æ–¥–∞–π <code>"use strict";</code> –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ–∞–π–ª—É)',

    // PHP –ü—Ä–∏–Ω—Ü–∏–ø–∏
    php_principles_h2: 'üîü –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ —á–∏—Å—Ç–æ–≥–æ PHP-–∫–æ–¥—É',
    php_principle_1:
      '<strong>–î–æ—Ç—Ä–∏–º—É–π—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ñ–≤ PSR</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>PSR-12</code> –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É.',
    php_principle_2:
      '<strong>–ß—ñ—Ç–∫—ñ —ñ–º–µ–Ω–∞ –∑–º—ñ–Ω–Ω–∏—Ö —ñ –º–µ—Ç–æ–¥—ñ–≤</strong><br /><code>$userRepository</code> –∫—Ä–∞—â–µ, –Ω—ñ–∂ <code>$repo</code>.',
    php_principle_3:
      '<strong>–û–¥–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ‚Äî –æ–¥–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å</strong><br />–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>getUserData</code> –ª–∏—à–µ –æ—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ.',
    php_principle_4:
      '<strong>DRY ‚Äî Don‚Äôt Repeat Yourself</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ—É–Ω–∫—Ü—ñ—ó —á–∏ –∫–ª–∞—Å–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–æ–≥–æ –∫–æ–¥—É.',
    php_principle_5:
      '<strong>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–∏–ø—ñ–∑–∞—Ü—ñ—é</strong><br />–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <pre><code>function add(int $a, int $b): int { return $a + $b; }</code></pre>',
    php_principle_6:
      '<strong>–ú—ñ–Ω—ñ–º—ñ–∑—É–π –≤–∫–ª–∞–¥–µ–Ω—ñ—Å—Ç—å</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ä–∞–Ω–Ω—ñ–π <code>return</code>: <pre><code>if (!$user) return null;</code></pre>',
    php_principle_7:
      '<strong>–û–±—Ä–æ–±–ª—è–π –ø–æ–º–∏–ª–∫–∏</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>try/catch</code> –¥–ª—è –≤–∏–Ω—è—Ç–∫—ñ–≤.',
    php_principle_8:
      '<strong>–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –ø–æ—è—Å–Ω—é—é—Ç—å ¬´—á–æ–º—É¬ª</strong><br />–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <pre><code>// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è\nprivate $cache = [];</code></pre>',
    php_principle_9:
      '<strong>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Composer</strong><br />–û—Ä–≥–∞–Ω—ñ–∑—É–π –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ <code>composer.json</code>.',
    php_principle_10:
      '<strong>–£–Ω–∏–∫–∞–π –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö</strong><br />–ö—Ä–∞—â–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.',

    // PHP –ß–µ–∫–ª—ñ—Å—Ç
    php_checklist_h2: '‚úÖ –ß–µ–∫–ª—ñ—Å—Ç —á–∏—Å—Ç–æ–≥–æ PHP-–∫–æ–¥—É',

    php_names_legend: 'üî° –Ü–º–µ–Ω–∞ —Ç–∞ –∑–º—ñ–Ω–Ω—ñ',
    php_checklist_names_1: '–ß—ñ—Ç–∫—ñ —ñ–º–µ–Ω–∞ –∑–º—ñ–Ω–Ω–∏—Ö —ñ –º–µ—Ç–æ–¥—ñ–≤?',
    php_checklist_names_1_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>$userService</code> –∫—Ä–∞—â–µ, –Ω—ñ–∂ <code>$s</code>)',
    php_checklist_names_2: '–ú–∞–≥—ñ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–Ω–µ—Å–µ–Ω—ñ?',
    php_checklist_names_2_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>const MAX_USERS = 100;</code>)',
    php_checklist_names_3: '–ù–µ–º–∞—î —Å—Ö–æ–∂–∏—Ö —ñ–º–µ–Ω?',
    php_checklist_names_3_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>$user</code> —ñ <code>$users</code>)',

    php_structure_legend: 'üß© –°—Ç—Ä—É–∫—Ç—É—Ä–∞',
    php_checklist_structure_1: '–û–¥–∏–Ω —Ä—è–¥–æ–∫ ‚Äî –æ–¥–Ω–∞ –¥—ñ—è?',
    php_checklist_structure_1_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>$sum = $a + $b;</code>)',
    php_checklist_structure_2: '–ú–µ—Ç–æ–¥–∏ –Ω–µ–≤–µ–ª–∏–∫—ñ, —Ä–æ–±–ª—è—Ç—å –æ–¥–Ω–µ?',
    php_checklist_structure_2_small: '(–î–æ 20-30 —Ä—è–¥–∫—ñ–≤)',
    php_checklist_structure_3: '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∫–ª–∞–¥–µ–Ω—ñ—Å—Ç—å?',
    php_checklist_structure_3_small:
      '(–†–∞–Ω–Ω—ñ–π <code>return</code> –∑–∞–º—ñ—Å—Ç—å –≤–∫–ª–∞–¥–µ–Ω–∏—Ö <code>if</code>)',

    php_repetition_legend: '‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–∏',
    php_checklist_repetition_1: '–£–Ω–∏–∫–Ω–µ–Ω–æ –∫–æ–ø—ñ–ø–∞—Å—Ç—É?',
    php_checklist_repetition_1_small: '(–í–∏–Ω–æ—Å—å —É —Ñ—É–Ω–∫—Ü—ñ—ó —á–∏ –∫–ª–∞—Å–∏)',
    php_checklist_repetition_2: '–°—Ö–æ–∂—ñ –∑–∞–¥–∞—á—ñ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –æ–¥–Ω–∞–∫–æ–≤–æ?',
    php_checklist_repetition_2_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–¥–Ω–∞–∫–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥—ñ–≤)',

    php_formatting_legend: 'üßº –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è',
    php_checklist_formatting_1: '–î–æ—Ç—Ä–∏–º–∞–Ω–æ PSR-12?',
    php_checklist_formatting_1_small:
      "(<a href='https://www.php-fig.org/psr/psr-12/' target='_blank' rel='noopener'>PSR-12</a>)",
    php_checklist_formatting_2: '–û–¥–Ω–∞–∫–æ–≤—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è?',
    php_checklist_formatting_2_small: '(–ü–µ—Ä–µ–≤—ñ—Ä —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–ª—å–Ω–∏–∫)',
    php_checklist_formatting_3: '–í–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –∫–æ–¥?',
    php_checklist_formatting_3_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Å—Ç–∞—Ä—ñ —Ñ—É–Ω–∫—Ü—ñ—ó)',

    php_logic_legend: 'üß† –õ–æ–≥—ñ–∫–∞',
    php_checklist_logic_1: '–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –≤—Å—ñ –≥—ñ–ª–∫–∏?',
    php_checklist_logic_1_small: '(–ü–µ—Ä–µ–≤—ñ—Ä <code>if/else</code>, —Ü–∏–∫–ª–∏)',
    php_checklist_logic_2: '–û–±—Ä–æ–±–ª–µ–Ω–æ –≤–∏–Ω—è—Ç–∫–∏?',
    php_checklist_logic_2_small: '(–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>try/catch</code>)',
    php_checklist_logic_3: '–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ edge cases?',
    php_checklist_logic_3_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ, <code>null</code>)',

    php_comments_legend: 'üìú –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ',
    php_checklist_comments_1: '–Ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —Ç–∞–º, –¥–µ —Ç—Ä–µ–±–∞?',
    php_checklist_comments_1_small: '(–ö–æ–º–µ–Ω—Ç—É–π —Å–∫–ª–∞–¥–Ω—É –ª–æ–≥—ñ–∫—É)',
    php_checklist_comments_2: '–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –ø–æ—è—Å–Ω—é—é—Ç—å ¬´—á–æ–º—É¬ª?',
    php_checklist_comments_2_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, ¬´// –î–ª—è –±–µ–∑–ø–µ–∫–∏¬ª)',
    php_checklist_comments_3: '–ö–æ–¥ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤?',
    php_checklist_comments_3_small:
      '(–ó—Ä–æ–∑—É–º—ñ–ª—ñ —ñ–º–µ–Ω–∞ –∑–º–µ–Ω—à—É—é—Ç—å –ø–æ—Ç—Ä–µ–±—É —É –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö)',

    php_testing_legend: 'üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è',
    php_checklist_testing_1: '–ö–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –≤ –¥—ñ—ó?',
    php_checklist_testing_1_small: '(–ó–∞–ø—É—Å—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä)',
    php_checklist_testing_2: '–ù–µ –ª–∞–º–∞—î —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É?',
    php_checklist_testing_2_small: '(–ü–µ—Ä–µ–≤—ñ—Ä —Å—Ç–∞—Ä—ñ —Ñ—É–Ω–∫—Ü—ñ—ó)',
    php_checklist_testing_3: '–ü—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º–∏?',
    php_checklist_testing_3_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>PHPUnit</code>)',

    php_security_legend: 'üîí –ë–µ–∑–ø–µ–∫–∞',
    php_checklist_security_1: '–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –Ω–∞ SQL-—ñ–Ω‚Äô—î–∫—Ü—ñ—ó —Ç–∞ XSS?',
    php_checklist_security_1_small: '(–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –∑–∞–ø–∏—Ç–∏)',
    php_checklist_security_2: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –±–µ–∑–ø–µ—á–Ω—ñ –º–µ—Ç–æ–¥–∏?',
    php_checklist_security_2_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>htmlspecialchars</code>)',
    php_optimization_legend: '‚ö° –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è',
    php_checklist_optimization_1: '–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å?',
    php_checklist_optimization_1_small: '(–£–Ω–∏–∫–∞–π –∑–∞–π–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ –ë–î)',
    php_checklist_optimization_2:
      '–í–¥–∞–ª–æ—Å—è –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –Ω–∞–¥–º—ñ—Ä–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é —Ä–µ—Å—É—Ä—Å—ñ–≤?',
    php_checklist_optimization_2_small: '(–ü–µ—Ä–µ–≤—ñ—Ä –∫–µ—à—É–≤–∞–Ω–Ω—è)',

    // Python –ü—Ä–∏–Ω—Ü–∏–ø–∏
    py_principles_h2: 'üîü –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ —á–∏—Å—Ç–æ–≥–æ Python-–∫–æ–¥—É',
    py_principle_1:
      '<strong>–î–æ—Ç—Ä–∏–º—É–π—Å—è PEP 8</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>flake8</code> –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.',
    py_principle_2:
      '<strong>–ß—ñ—Ç–∫—ñ —ñ–º–µ–Ω–∞ –∑–º—ñ–Ω–Ω–∏—Ö</strong><br /><code>user_profile</code> –∫—Ä–∞—â–µ, –Ω—ñ–∂ <code>u</code>.',
    py_principle_3:
      '<strong>–§—É–Ω–∫—Ü—ñ—è —Ä–æ–±–∏—Ç—å –æ–¥–Ω—É —Ä—ñ—á</strong><br />–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>get_user_data</code> –ª–∏—à–µ –æ—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ.',
    py_principle_4:
      '<strong>DRY ‚Äî Don‚Äôt Repeat Yourself</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ—É–Ω–∫—Ü—ñ—ó —á–∏ –∫–ª–∞—Å–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—ñ–≤.',
    py_principle_5:
      '<strong>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π list comprehensions</strong><br />–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <pre><code>[x*2 for x in numbers]</code></pre>',
    py_principle_6:
      '<strong>–ú—ñ–Ω—ñ–º—ñ–∑—É–π –≤–∫–ª–∞–¥–µ–Ω—ñ—Å—Ç—å</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ä–∞–Ω–Ω—ñ–π <code>return</code>: <pre><code>if not user: return None</code></pre>',
    py_principle_7:
      '<strong>–û–±—Ä–æ–±–ª—è–π –≤–∏–Ω—è—Ç–∫–∏</strong><br />–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>try/except</code> –¥–ª—è –ø–æ–º–∏–ª–æ–∫.',
    py_principle_8:
      '<strong>–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –ø–æ—è—Å–Ω—é—é—Ç—å ¬´—á–æ–º—É¬ª</strong><br />–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <pre><code># –ö–µ—à –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó\ncache = {}</code></pre>',
    py_principle_9:
      '<strong>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –≤—ñ—Ä—Ç—É–∞–ª—å–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞</strong><br />–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>venv</code> –∞–±–æ <code>poetry</code>.',
    py_principle_10:
      '<strong>–ü–∏—à–∏ —Å–∞–º–æ–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤–∞–Ω–∏–π –∫–æ–¥</strong><br />–ß—ñ—Ç–∫—ñ —ñ–º–µ–Ω–∞ –∑–º–µ–Ω—à—É—é—Ç—å –ø–æ—Ç—Ä–µ–±—É –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö.',

    // Python –ß–µ–∫–ª—ñ—Å—Ç
    py_checklist_h2: '‚úÖ –ß–µ–∫–ª—ñ—Å—Ç —á–∏—Å—Ç–æ–≥–æ Python-–∫–æ–¥—É',

    py_names_legend: 'üî° –Ü–º–µ–Ω–∞ —Ç–∞ –∑–º—ñ–Ω–Ω—ñ',
    py_checklist_names_1: '–ß—ñ—Ç–∫—ñ —ñ–º–µ–Ω–∞ –∑–º—ñ–Ω–Ω–∏—Ö?',
    py_checklist_names_1_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>user_data</code> –∫—Ä–∞—â–µ, –Ω—ñ–∂ <code>d</code>)',
    py_checklist_names_2: '–ú–∞–≥—ñ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–Ω–µ—Å–µ–Ω—ñ?',
    py_checklist_names_2_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>MAX_USERS = 100</code>)',
    py_checklist_names_3: '–ù–µ–º–∞—î —Å—Ö–æ–∂–∏—Ö —ñ–º–µ–Ω?',
    py_checklist_names_3_small:
      '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>user</code> —ñ <code>users</code>)',

    py_structure_legend: 'üß© –°—Ç—Ä—É–∫—Ç—É—Ä–∞',
    py_checklist_structure_1: '–û–¥–∏–Ω —Ä—è–¥–æ–∫ ‚Äî –æ–¥–Ω–∞ –¥—ñ—è?',
    py_checklist_structure_1_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>total = a + b</code>)',
    py_checklist_structure_2: '–§—É–Ω–∫—Ü—ñ—ó –Ω–µ–≤–µ–ª–∏–∫—ñ, —Ä–æ–±–ª—è—Ç—å –æ–¥–Ω–µ?',
    py_checklist_structure_2_small: '(–î–æ 20-30 —Ä—è–¥–∫—ñ–≤)',
    py_checklist_structure_3: '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∫–ª–∞–¥–µ–Ω—ñ—Å—Ç—å?',
    py_checklist_structure_3_small: '(–†–∞–Ω–Ω—ñ–π <code>return</code>)',

    py_repetition_legend: '‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–∏',
    py_checklist_repetition_1: '–£–Ω–∏–∫–Ω–µ–Ω–æ –∫–æ–ø—ñ–ø–∞—Å—Ç—É?',
    py_checklist_repetition_1_small: '(–í–∏–Ω–æ—Å—å —É —Ñ—É–Ω–∫—Ü—ñ—ó)',
    py_checklist_repetition_2: '–°—Ö–æ–∂—ñ –∑–∞–¥–∞—á—ñ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –æ–¥–Ω–∞–∫–æ–≤–æ?',
    py_checklist_repetition_2_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–¥–Ω–∞–∫–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥—ñ–≤)',

    py_formatting_legend: 'üßº –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è',
    py_checklist_formatting_1: '–î–æ—Ç—Ä–∏–º–∞–Ω–æ PEP 8?',
    py_checklist_formatting_1_small:
      "(<a href='https://peps.python.org/pep-0008/' target='_blank' rel='noopener'>PEP 8</a>)",
    py_checklist_formatting_2: '–û–¥–Ω–∞–∫–æ–≤—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è?',
    py_checklist_formatting_2_small: '(–ü–µ—Ä–µ–≤—ñ—Ä —á–µ—Ä–µ–∑ <code>flake8</code>)',
    py_checklist_formatting_3: '–í–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –∫–æ–¥?',
    py_checklist_formatting_3_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Å—Ç–∞—Ä—ñ —Ñ—É–Ω–∫—Ü—ñ—ó)',

    py_logic_legend: 'üß† –õ–æ–≥—ñ–∫–∞',
    py_checklist_logic_1: '–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –≤—Å—ñ –≥—ñ–ª–∫–∏?',
    py_checklist_logic_1_small: '(–ü–µ—Ä–µ–≤—ñ—Ä <code>if/else</code>, —Ü–∏–∫–ª–∏)',
    py_checklist_logic_2: '–û–±—Ä–æ–±–ª–µ–Ω–æ –≤–∏–Ω—è—Ç–∫–∏?',
    py_checklist_logic_2_small: '(–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π <code>try/except</code>)',
    py_checklist_logic_3: '–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ edge cases?',
    py_checklist_logic_3_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ, <code>None</code>)',

    py_comments_legend: 'üìú –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ',
    py_checklist_comments_1: '–Ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —Ç–∞–º, –¥–µ —Ç—Ä–µ–±–∞?',
    py_checklist_comments_1_small: '(–ö–æ–º–µ–Ω—Ç—É–π —Å–∫–ª–∞–¥–Ω—É –ª–æ–≥—ñ–∫—É)',
    py_checklist_comments_2: '–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –ø–æ—è—Å–Ω—é—é—Ç—å ¬´—á–æ–º—É¬ª?',
    py_checklist_comments_2_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, ¬´// –î–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è¬ª)',
    py_checklist_comments_3: '–ö–æ–¥ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤?',
    py_checklist_comments_3_small: '(–ß—ñ—Ç–∫—ñ —ñ–º–µ–Ω–∞ –∑–º–µ–Ω—à—É—é—Ç—å –ø–æ—Ç—Ä–µ–±—É)',

    py_testing_legend: 'üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è',
    py_checklist_testing_1: '–ö–æ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –≤ –¥—ñ—ó?',
    py_checklist_testing_1_small: '(–ó–∞–ø—É—Å—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä)',
    py_checklist_testing_2: '–ù–µ –ª–∞–º–∞—î —ñ—Å–Ω—É—é—á—É –ª–æ–≥—ñ–∫—É?',
    py_checklist_testing_2_small: '(–ü–µ—Ä–µ–≤—ñ—Ä —Å—Ç–∞—Ä—ñ —Ñ—É–Ω–∫—Ü—ñ—ó)',
    py_checklist_testing_3: '–ü—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º–∏?',
    py_checklist_testing_3_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <code>pytest</code>)',

    py_security_legend: 'üîí –ë–µ–∑–ø–µ–∫–∞',
    py_checklist_security_1: '–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –Ω–∞ –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ?',
    py_checklist_security_1_small:
      '(–ï–∫—Ä–∞–Ω—É–π –¥–∞–Ω—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, <code>html.escape</code>)',
    py_checklist_security_2: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –±–µ–∑–ø–µ—á–Ω—ñ –º–µ—Ç–æ–¥–∏?',
    py_checklist_security_2_small: '(–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ –ë–î)',

    py_optimization_legend: '‚ö° –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è',
    py_checklist_optimization_1: '–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å?',
    py_checklist_optimization_1_small: '(–£–Ω–∏–∫–∞–π –∑–∞–π–≤–∏—Ö —Ü–∏–∫–ª—ñ–≤)',
    py_checklist_optimization_2:
      '–í–¥–∞–ª–æ—Å—è –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –Ω–∞–¥–º—ñ—Ä–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é —Ä–µ—Å—É—Ä—Å—ñ–≤?',
    py_checklist_optimization_2_small: '(–ü–µ—Ä–µ–≤—ñ—Ä –∫–µ—à—É–≤–∞–Ω–Ω—è)',
  },

  en: {
    meta_description:
      'Checklists and clean code principles for JavaScript, PHP, and Python by Andriy Ovcharov.',
    meta_keywords:
      'clean code, JavaScript, PHP, Python, programming, checklist',
    title: 'Clean Code ‚Äî Principles + Checklist',
    header_h1: 'üßº Clean Code ‚Äî Principles + Checklist',
    header_p:
      'Code with style. Code consciously. Check yourself before pushing.',
    theme_toggle: 'Change theme',
    reset_checklist: 'Reset checklist',
    progress_label: 'Completed:',
    progress_of: 'of',
    result_text:
      "üü¢ All items completed? You're a clean code god. Push with peace of mind üòéüöÄ",
    footer_text: 'Created with ‚ù§Ô∏è <strong>Andriy Ovcharov</strong>',
    footer_quote: '¬´Code with style. Code consciously.¬ª',

    // JavaScript Principles
    js_principles_h2: 'üîü Key Principles of Clean JavaScript Code',
    js_principle_1:
      '<strong>One Line ‚Äî One Action</strong><br /><code>const total = price * quantity;</code> ‚Äî avoid multiple operations in one line.',
    js_principle_2:
      '<strong>Clear Variable Names</strong><br /><code>const userProfile;</code> is better than <code>const u;</code>',
    js_principle_3:
      '<strong>Functions Do One Thing</strong><br />For example, the function <code>fetchUserData</code> only fetches data, not updates the UI.',
    js_principle_4:
      '<strong>DRY ‚Äî Don‚Äôt Repeat Yourself</strong><br />Use <code>map</code> or <code>reduce</code> to avoid repetition.',
    js_principle_5:
      '<strong>Use <code>const</code> by Default</strong><br />Use <code>const</code> instead of <code>let</code> if the value doesn‚Äôt change.',
    js_principle_6:
      '<strong>Minimize Nesting</strong><br />Use early <code>return</code>, e.g.: <pre><code>if (!user) return null;</code></pre>',
    js_principle_7:
      "<strong>Comments Explain 'Why'</strong><br />For example: <pre><code>// Cache result for optimization\nconst cachedData = getData();</code></pre>",
    js_principle_8:
      '<strong>Use ES6+ Features</strong><br />Arrow functions, destructuring: <code>const { id, name } = user;</code>',
    js_principle_9:
      '<strong>Handle Asynchronicity Clearly</strong><br />Use <code>async/await</code> instead of <code>.then</code>.',
    js_principle_10:
      '<strong>Format Code Automatically</strong><br />ESLint + Prettier for consistent style.',
    js_principle_11:
      '<strong>Avoid Global Variables</strong><br />Use modules or closures.',
    js_principle_12:
      '<strong>Check Data Types</strong><br />Use <code>typeof</code> or TypeScript for safety.',

    // JavaScript Checklist
    js_checklist_h2: '‚úÖ Clean JavaScript Code Checklist',

    js_names_legend: 'üî° Names & Variables',
    js_checklist_names_1: 'Do variable/function names convey their purpose?',
    js_checklist_names_1_small:
      '(E.g., <code>calculateTotalPrice</code> is better than <code>calc</code>)',
    js_checklist_names_2: 'Are magic values extracted to constants?',
    js_checklist_names_2_small:
      '(E.g., <code>const MAX_USERS = 100;</code> instead of <code>100</code>)',
    js_checklist_names_3: 'No confusingly similar names?',
    js_checklist_names_3_small:
      '(E.g., <code>user</code> and <code>users</code> can cause confusion)',

    js_structure_legend: 'üß© Structure',
    js_checklist_structure_1: 'One line ‚Äî one action?',
    js_checklist_structure_1_small:
      '(E.g., <code>const sum = a + b;</code> instead of multiple actions)',
    js_checklist_structure_2: 'Are functions small and focused on one task?',
    js_checklist_structure_2_small:
      '(Functions up to 20 lines, e.g., <code>getUserById</code>)',
    js_checklist_structure_3: 'Is nesting depth minimized?',
    js_checklist_structure_3_small:
      '(Use early <code>return</code> instead of deep <code>if</code> statements)',

    js_repetition_legend: '‚ôªÔ∏è Repetition',
    js_checklist_repetition_1: 'Avoided code duplication?',
    js_checklist_repetition_1_small:
      '(E.g., use <code>array.map</code> instead of loops)',
    js_checklist_repetition_2: 'Are similar tasks implemented consistently?',
    js_checklist_repetition_2_small:
      '(E.g., date formatting via <code>date-fns</code>)',

    js_formatting_legend: 'üßº Formatting',
    js_checklist_formatting_1: 'Ran Prettier/ESLint?',
    js_checklist_formatting_1_small:
      "(<a href='https://eslint.org' target='_blank' rel='noopener'>ESLint</a> and <a href='https://prettier.io' target='_blank' rel='noopener'>Prettier</a>)",
    js_checklist_formatting_2:
      'Are all indents, quotes, and spaces consistent?',
    js_checklist_formatting_2_small: '(Check via formatter)',
    js_checklist_formatting_3: 'Removed "dead" code?',
    js_checklist_formatting_3_small:
      '(E.g., unused functions or <code>console.log</code>)',

    js_logic_legend: 'üß† Logic',
    js_checklist_logic_1: 'All branches tested?',
    js_checklist_logic_1_small:
      '(Check <code>if/else</code>, <code>switch</code>, loops)',
    js_checklist_logic_2: 'Used <code>===</code> instead of <code>==</code>?',
    js_checklist_logic_2_small: '(Strict equality avoids errors)',
    js_checklist_logic_3: 'All edge cases handled?',
    js_checklist_logic_3_small:
      '(Check <code>null</code>, <code>undefined</code>, empty arrays)',
    js_checklist_logic_4: 'Asynchronous code tested?',
    js_checklist_logic_4_small:
      '(Ensure <code>async/await</code> handles errors)',

    js_comments_legend: 'üìú Comments',
    js_checklist_comments_1: 'Comments present where needed?',
    js_checklist_comments_1_small: '(Comment complex logic, e.g., closures)',
    js_checklist_comments_2: "Comments explain 'why,' not 'what'?",
    js_checklist_comments_2_small:
      "(E.g., '// For caching' is better than '// Stores result')",
    js_checklist_comments_3: 'Code clear without comments?',
    js_checklist_comments_3_small: '(Clear names reduce the need for comments)',

    js_testing_legend: 'üß™ Testing',
    js_checklist_testing_1: 'Code tested in action?',
    js_checklist_testing_1_small: '(Run and verify results)',
    js_checklist_testing_2: "Doesn't break existing logic?",
    js_checklist_testing_2_small: '(Check old functions after changes)',
    js_checklist_testing_3: 'Tested manually or with automated tests?',
    js_checklist_testing_3_small:
      '(Use <code>Jest</code> or <code>Mocha</code>)',

    js_security_legend: 'üîí Security',
    js_checklist_security_1: 'Checked for vulnerabilities (XSS, injections)?',
    js_checklist_security_1_small:
      '(Sanitize data, e.g., via <code>DOMPurify</code>)',
    js_checklist_security_2: 'Used safe access methods?',
    js_checklist_security_2_small:
      '(E.g., avoid <code>eval</code> or <code>innerHTML</code>)',
    js_optimization_legend: '‚ö° Optimization',
    js_checklist_optimization_1: 'Code optimized for performance?',
    js_checklist_optimization_1_small:
      '(E.g., use <code>forEach</code> instead of <code>for</code> for readability)',
    js_checklist_optimization_2: 'Avoided excessive resource usage?',
    js_checklist_optimization_2_small:
      '(Check for memory leaks in closures or event listeners)',
    js_checklist_optimization_3: 'Used strict mode?',
    js_checklist_optimization_3_small:
      '(Add <code>"use strict";</code> at the file start)',

    // PHP Principles
    php_principles_h2: 'üîü Key Principles of Clean PHP Code',
    php_principle_1:
      '<strong>Follow PSR Standards</strong><br />Use <code>PSR-12</code> for code formatting.',
    php_principle_2:
      '<strong>Clear Variable and Method Names</strong><br /><code>$userRepository</code> is better than <code>$repo</code>.',
    php_principle_3:
      '<strong>One Function ‚Äî One Responsibility</strong><br />For example, <code>getUserData</code> only fetches data.',
    php_principle_4:
      '<strong>DRY ‚Äî Don‚Äôt Repeat Yourself</strong><br />Use functions or classes for repeated code.',
    php_principle_5:
      '<strong>Use Type Hints</strong><br />For example: <pre><code>function add(int $a, int $b): int { return $a + $b; }</code></pre>',
    php_principle_6:
      '<strong>Minimize Nesting</strong><br />Use early <code>return</code>: <pre><code>if (!$user) return null;</code></pre>',
    php_principle_7:
      '<strong>Handle Errors</strong><br />Use <code>try/catch</code> for exceptions.',
    php_principle_8:
      "<strong>Comments Explain 'Why'</strong><br />For example: <pre><code>// Used for caching\nprivate $cache = [];</code></pre>",
    php_principle_9:
      '<strong>Use Composer</strong><br />Organize dependencies via <code>composer.json</code>.',
    php_principle_10:
      '<strong>Avoid Global Variables</strong><br />Pass data through parameters instead.',

    // PHP Checklist
    php_checklist_h2: '‚úÖ Clean PHP Code Checklist',
    php_names_legend: 'üî° Names & Variables',
    php_checklist_names_1: 'Clear variable and method names?',
    php_checklist_names_1_small:
      '(E.g., <code>$userService</code> is better than <code>$s</code>)',
    php_checklist_names_2: 'Magic values extracted to constants?',
    php_checklist_names_2_small: '(E.g., <code>const MAX_USERS = 100;</code>)',
    php_checklist_names_3: 'No similar names causing confusion?',
    php_checklist_names_3_small:
      '(E.g., <code>$user</code> and <code>$users</code>)',
    php_structure_legend: 'üß© Structure',
    php_checklist_structure_1: 'One line ‚Äî one action?',
    php_checklist_structure_1_small: '(E.g., <code>$sum = $a + $b;</code>)',
    php_checklist_structure_2: 'Methods small and focused on one task?',
    php_checklist_structure_2_small: '(Up to 20-30 lines)',
    php_checklist_structure_3: 'Minimal nesting?',
    php_checklist_structure_3_small:
      '(Early <code>return</code> instead of nested <code>if</code>)',
    php_repetition_legend: '‚ôªÔ∏è Repetition',
    php_checklist_repetition_1: 'Avoided code duplication?',
    php_checklist_repetition_1_small: '(Extract to functions or classes)',
    php_checklist_repetition_2: 'Similar tasks are handled identically?',
    php_checklist_repetition_2_small: '(E.g., consistent log formatting)',
    php_formatting_legend: 'üßº Formatting',
    php_checklist_formatting_1: 'Followed PSR-12?',
    php_checklist_formatting_1_small:
      "(<a href='https://www.php-fig.org/psr/psr-12/' target='_blank' rel='noopener'>PSR-12</a>)",
    php_checklist_formatting_2: 'Consistent indents and formatting?',
    php_checklist_formatting_2_small: '(Check via formatter)',
    php_checklist_formatting_3: 'Removed unused code?',
    php_checklist_formatting_3_small: '(E.g., old functions)',

    php_logic_legend: 'üß† Logic',
    php_checklist_logic_1: 'All branches tested?',
    php_checklist_logic_1_small: '(Check <code>if/else</code>, loops)',
    php_checklist_logic_2: 'Exceptions handled?',
    php_checklist_logic_2_small: '(Use <code>try/catch</code>)',
    php_checklist_logic_3: 'Edge cases checked?',
    php_checklist_logic_3_small: '(E.g., empty data, <code>null</code>)',

    php_comments_legend: 'üìú Comments',
    php_checklist_comments_1: 'Comments present where needed?',
    php_checklist_comments_1_small: '(Comment complex logic)',
    php_checklist_comments_2: "Comments explain 'why'?",
    php_checklist_comments_2_small: "(E.g., '// For security')",
    php_checklist_comments_3: 'Code clear without comments?',
    php_checklist_comments_3_small: '(Clear names reduce comment need)',

    php_testing_legend: 'üß™ Testing',
    php_checklist_testing_1: 'Code tested in action?',
    php_checklist_testing_1_small: '(Run and verify)',
    php_checklist_testing_2: "Doesn't break existing logic?",
    php_checklist_testing_2_small: '(Check old functions)',
    php_checklist_testing_3: 'Tested with automated tests?',
    php_checklist_testing_3_small: '(E.g., <code>PHPUnit</code>)',

    php_security_legend: 'üîí Security',
    php_checklist_security_1: 'Checked for SQL injections and XSS?',
    php_checklist_security_1_small: '(Use prepared statements)',
    php_checklist_security_2: 'Used safe methods?',
    php_checklist_security_2_small: '(E.g., <code>htmlspecialchars</code>)',

    php_optimization_legend: '‚ö° Optimization',
    php_checklist_optimization_1: 'Optimized for performance?',
    php_checklist_optimization_1_small: '(Avoid unnecessary DB queries)',
    php_checklist_optimization_2: 'Avoided excessive resource usage?',
    php_checklist_optimization_2_small: '(Check caching)',

    // Python Principles
    py_principles_h2: 'üîü Key Principles of Clean Python Code',
    py_principle_1:
      '<strong>Follow PEP 8</strong><br />Use <code>flake8</code> for formatting.',
    py_principle_2:
      '<strong>Clear Variable Names</strong><br /><code>user_profile</code> is better than <code>u</code>.',
    py_principle_3:
      '<strong>Functions Do One Thing</strong><br />For example, <code>get_user_data</code> only fetches data.',
    py_principle_4:
      '<strong>DRY ‚Äî Don‚Äôt Repeat Yourself</strong><br />Use functions or classes for repetition.',
    py_principle_5:
      '<strong>Use List Comprehensions</strong><br />For example: <pre><code>[x*2 for x in numbers]</code></pre>',
    py_principle_6:
      '<strong>Minimize Nesting</strong><br />Use early <code>return</code>: <pre><code>if not user: return None</code></pre>',
    py_principle_7:
      '<strong>Handle Exceptions</strong><br />Use <code>try/except</code> for errors.',
    py_principle_8:
      "<strong>Comments Explain 'Why'</strong><br />For example: <pre><code># Cache for optimization\ncache = {}</code></pre>",
    py_principle_9:
      '<strong>Use Virtual Environments</strong><br />For example, <code>venv</code> or <code>poetry</code>.',
    py_principle_10:
      '<strong>Write Self-Documenting Code</strong><br />Clear names reduce the need for comments.',
    // Python Checklist
    py_checklist_h2: '‚úÖ Clean Python Code Checklist',

    py_names_legend: 'üî° Names & Variables',
    py_checklist_names_1: 'Clear variable names?',
    py_checklist_names_1_small:
      '(E.g., <code>user_data</code> is better than <code>d</code>)',
    py_checklist_names_2: 'Magic values extracted?',
    py_checklist_names_2_small: '(E.g., <code>MAX_USERS = 100</code>)',
    py_checklist_names_3: 'No similar names?',
    py_checklist_names_3_small:
      '(E.g., <code>user</code> and <code>users</code>)',

    py_structure_legend: 'üß© Structure',
    py_checklist_structure_1: 'One line ‚Äî one action?',
    py_checklist_structure_1_small: '(E.g., <code>total = a + b</code>)',
    py_checklist_structure_2: 'Functions small and focused on one task?',
    py_checklist_structure_2_small: '(Up to 20-30 lines)',
    py_checklist_structure_3: 'Minimal nesting?',
    py_checklist_structure_3_small: '(Early <code>return</code>)',

    py_repetition_legend: '‚ôªÔ∏è Repetition',
    py_checklist_repetition_1: 'Avoided code duplication?',
    py_checklist_repetition_1_small: '(Extract to functions)',
    py_checklist_repetition_2: 'Similar tasks implemented consistently?',
    py_checklist_repetition_2_small: '(E.g., consistent log formatting)',

    py_formatting_legend: 'üßº Formatting',
    py_checklist_formatting_1: 'Followed PEP 8?',
    py_checklist_formatting_1_small:
      "(<a href='https://peps.python.org/pep-0008/' target='_blank' rel='noopener'>PEP 8</a>)",
    py_checklist_formatting_2: 'Consistent indents and formatting?',
    py_checklist_formatting_2_small: '(Check via <code>flake8</code>)',
    py_checklist_formatting_3: 'Removed unused code?',
    py_checklist_formatting_3_small: '(E.g., old functions)',

    py_logic_legend: 'üß† Logic',
    py_checklist_logic_1: 'All branches tested?',
    py_checklist_logic_1_small: '(Check <code>if/else</code>, loops)',
    py_checklist_logic_2: 'Exceptions handled?',
    py_checklist_logic_2_small: '(Use <code>try/except</code>)',
    py_checklist_logic_3: 'Edge cases checked?',
    py_checklist_logic_3_small: '(E.g., empty data, <code>None</code>)',

    py_comments_legend: 'üìú Comments',
    py_checklist_comments_1: 'Comments present where needed?',
    py_checklist_comments_1_small: '(Comment complex logic)',
    py_checklist_comments_2: "Comments explain 'why'?",
    py_checklist_comments_2_small: "(E.g., '// For caching')",
    py_checklist_comments_3: 'Code clear without comments?',
    py_checklist_comments_3_small: '(Clear names reduce comment need)',

    py_testing_legend: 'üß™ Testing',
    py_checklist_testing_1: 'Code tested in action?',
    py_checklist_testing_1_small: '(Run and verify)',
    py_checklist_testing_2: "Doesn't break existing logic?",
    py_checklist_testing_2_small: '(Check old functions)',
    py_checklist_testing_3: 'Tested with automated tests?',
    py_checklist_testing_3_small: '(E.g., <code>pytest</code>)',

    py_security_legend: 'üîí Security',
    py_checklist_security_1: 'Checked for vulnerabilities?',
    py_checklist_security_1_small:
      '(Sanitize data, e.g., <code>html.escape</code>)',
    py_checklist_security_2: 'Used safe methods?',
    py_checklist_security_2_small: '(E.g., prepared DB queries)',
    py_optimization_legend: '‚ö° Optimization',
    py_checklist_optimization_1: 'Optimized for performance?',
    py_checklist_optimization_1_small: '(Avoid unnecessary loops)',
    py_checklist_optimization_2: 'Avoided excessive resource usage?',
    py_checklist_optimization_2_small: '(Check caching)',
  },
};

// DOM –µ–ª–µ–º–µ–Ω—Ç–∏
const checklists = document.querySelectorAll('.checklist');
const languageToggles = document.querySelectorAll('.language-toggle');
const translateToggles = document.querySelectorAll('.translate-toggle');
const result = document.querySelector('.result');
const progressCount = document.getElementById('progress-count');
const totalCount = document.getElementById('total-count');
const themeToggle = document.getElementById('theme-toggle');
const resetChecklist = document.getElementById('reset-checklist');

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
function updateTranslations(lang) {
  document.documentElement.setAttribute('lang', lang);
  document.querySelectorAll('[data-translate]').forEach(element => {
    const key = element.getAttribute('data-translate');
    if (translations[lang][key]) {
      if (element.tagName === 'META') {
        element.setAttribute('content', translations[lang][key]);
      } else if (element.tagName === 'TITLE') {
        document.title = translations[lang][key];
      } else {
        element.innerHTML = translations[lang][key];
      }
    }
  });

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏ —Ç–µ–º–∏
  updateThemeButtonText();
  console.log(`Language set to: ${lang}`);
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏ —Ç–µ–º–∏
function updateThemeButtonText() {
  const textSpan = themeToggle.querySelector('.theme-text');
  if (textSpan) {
    const lang = document.documentElement.getAttribute('lang') || 'uk';
    textSpan.innerHTML = document.body.classList.contains('light-theme')
      ? translations[lang].theme_toggle
      : translations[lang].theme_toggle;
  }
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ —á–µ–∫–ª—ñ—Å—Ç –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏
function showChecklist(language) {
  checklists.forEach(checklist => {
    checklist.style.display =
      checklist.dataset.language === language ? 'block' : 'none';
  });
  languageToggles.forEach(button => {
    button.classList.toggle('active', button.dataset.language === language);
  });
  updateProgress(language);
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
function updateProgress(language) {
  const activeChecklist = document.querySelector(
    `.checklist[data-language="${language}"]`
  );
  const checkboxes = activeChecklist.querySelectorAll('input[type="checkbox"]');
  const checkedCount = [...checkboxes].filter(cb => cb.checked).length;
  progressCount.textContent = checkedCount;
  totalCount.textContent = checkboxes.length;
  result.style.display = checkedCount === checkboxes.length ? 'block' : 'none';
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —á–µ–∫–±–æ–∫—Å—ñ–≤
function loadCheckboxes(language) {
  const checkboxes = document
    .querySelector(`.checklist[data-language="${language}"]`)
    .querySelectorAll('input[type="checkbox"]');
  checkboxes.forEach((cb, index) => {
    cb.checked =
      localStorage.getItem(`checkbox-${language}-${index}`) === 'true';
    cb.parentElement.classList.toggle('checked', cb.checked);
  });
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
let activeLanguage = localStorage.getItem('activeLanguage') || 'js';
let activeTranslateLang = localStorage.getItem('translateLang') || 'uk';
showChecklist(activeLanguage);
loadCheckboxes(activeLanguage);
updateTranslations(activeTranslateLang);

// –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º–æ–≤–∏ —á–µ–∫–ª—ñ—Å—Ç—ñ–≤
languageToggles.forEach(button => {
  button.addEventListener('click', () => {
    activeLanguage = button.dataset.language;
    localStorage.setItem('activeLanguage', activeLanguage);
    showChecklist(activeLanguage);
    loadCheckboxes(activeLanguage);
  });
});

// –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º–æ–≤–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
translateToggles.forEach(button => {
  button.addEventListener('click', () => {
    activeTranslateLang = button.dataset.translateLang;
    localStorage.setItem('translateLang', activeTranslateLang);
    updateTranslations(activeTranslateLang);
    translateToggles.forEach(btn => {
      btn.classList.toggle(
        'active',
        btn.dataset.translateLang === activeTranslateLang
      );
    });
    updateProgress(activeLanguage); // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å, —â–æ–± –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
  });
});

// –û–±—Ä–æ–±–∫–∞ —á–µ–∫–±–æ–∫—Å—ñ–≤
checklists.forEach(checklist => {
  const checkboxes = checklist.querySelectorAll('input[type="checkbox"]');
  checkboxes.forEach((cb, index) => {
    cb.addEventListener('change', () => {
      cb.parentElement.classList.toggle('checked', cb.checked);
      localStorage.setItem(
        `checkbox-${checklist.dataset.language}-${index}`,
        cb.checked
      );
      updateProgress(checklist.dataset.language);
    });
  });
});

// –°–∫–∏–¥–∞–Ω–Ω—è —á–µ–∫–ª—ñ—Å—Ç–∞
if (resetChecklist) {
  resetChecklist.addEventListener('click', () => {
    const activeChecklist = document.querySelector(
      `.checklist[data-language="${activeLanguage}"]`
    );
    const checkboxes = activeChecklist.querySelectorAll(
      'input[type="checkbox"]'
    );
    checkboxes.forEach((cb, index) => {
      cb.checked = false;
      cb.parentElement.classList.remove('checked');
      localStorage.setItem(`checkbox-${activeLanguage}-${index}`, 'false');
    });
    updateProgress(activeLanguage);
  });
} else {
  console.error('Reset checklist button not found');
}

// –ü–µ—Ä–µ–º–∏–∫–∞—á —Ç–µ–º–∏
if (themeToggle) {
  themeToggle.addEventListener('click', () => {
    console.log('Theme toggle clicked');
    document.body.classList.toggle('light-theme');
    const isLightTheme = document.body.classList.contains('light-theme');
    localStorage.setItem('theme', isLightTheme ? 'light' : 'dark');
    updateThemeButtonText();
    console.log(`Theme set to: ${isLightTheme ? 'light' : 'dark'}`);
  });
} else {
  console.error('Theme toggle button not found');
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–º–∏
const savedTheme = localStorage.getItem('theme');
if (savedTheme === 'light') {
  document.body.classList.add('light-theme');
  console.log('Loaded light theme from localStorage');
} else {
  console.log('Loaded dark theme (default or from localStorage)');
}
updateThemeButtonText();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–µ—Å—É
updateProgress(activeLanguage);
